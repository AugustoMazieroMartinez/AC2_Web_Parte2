Apresentação da atividade
A empresa Software System XYZ LTDA atua no ramo de desenvolvimento de software e
consultorias em geral. Recentemente um novo projeto foi aprovado e você, junto com uma
equipe, foi designado para trabalhar neste novo projeto.
O analista e líder da equipe criou um “documento visão” para organizar as dificuldades
do cliente e suas expectativas com esse projeto. Assim, o analista listou as seguintes tarefas
que você deve executar:
1. (1,0) Defina o diagrama de classe
2. (1,0) Crie as classes de entidade com JPA
3. (1,0) Implemente os relacionamentos entre as classes
4. (1,0) Crie os repositórios de cada classe utilizando JPARepository
5. (1,0) Implemente os métodos customizados do repositório
6. (2,0) Crie a camada de serviço utilizando o conceito de interface e
implementação.
7. (2,0) Crie a camada de controllers
8. (1,0) Crie um teste para cada método dos controllers.
OBS: Analise cada requisito do sistema para não esquecer de gerar nenhum método na
API, mesmo não valendo nota recomendo listarem os requisitos funcionais do sistema para não
esquecer de nenhuma funcionalidade.
A entrega deverá ser um documento com:
• O diagrama de classes (pode ser somente das classes que serão entidades)
• O código fonte de cada classe, repositório, serviço e controller.
• Link do Github com o projeto completo.
A atividade pode ser feita em até 4 pessoas, não esquecer de colocar o nome dos
integrantes.


Sistema de Agendamento de treinamento
A empresa XYZ é especializada em capacitações no ramo da fisioterapia,
assim, essa empresa desenvolve vários cursos em todo o país. Quando
determinada região atinge um número de interessados de 15 pessoas, um curso
é criado próximo a essa região para atender esta demanda.
A empresa oferece diversos cursos e trabalha com vários professores,
atualmente eles possuem um sistema de gestão que cuida de toda a parte de
folha de pagamento e matrícula dos alunos, bem como o pagamento das
mensalidades destes.
A maior dificuldade da empresa é gerenciar e organizar a agenda dos
professores que lecionarão esses cursos. Atualmente esse controle é feito
em planilhas do Excel. A secretária da empresa alimenta duas planilhas com as
informações, uma planilha é a geral, ou seja, mostra todos os agendamentos de
todas as cidades e de todos os professores. A outra planilha é a individual por
professor. 


O proprietário da empresa, Sr. Moacir deseja que essa nova solução
funcione em qualquer dispositivo, como: desktop, smartphones e tablets. A ideia
central é um ambiente em que a secretária poderá cadastrar os professores
(nome, cpf, rg e endereço, celular), os cursos (descrição, carga horária, objetivos
e ementa) e quais professores estão habilitados para tais, ou seja, sua
especialização. Outra função que a secretária desempenhará é a de cadastrar a
agenda, para isso ela deve informar qual é o curso que está sendo oferecido,
qual a data de início e fim, qual o horário de início e fim, qual o professor
responsável pelo treinamento, a cidade, estado e CEP que ocorrerá o
treinamento.

No momento do cadastramento da agenda, assim que informar o curso
deverá mostrar apenas os professores que detém essa especialização e uma
outra validação muito importante é verificar se esse professor já está ministrando
curso em outro local na mesma data, caso esteja esse não pode ser vinculado
como professor deste treinamento.

O professor por sua vez, entrará com sua identificação e terá acesso
apenas a sua agenda e poderá imprimi-la se necessário. Um outro recurso que
estará disponível para o professor é o cadastramento do resumo do treinamento,
uma espécie de ocorrência deste na qual ele informará o que deu certo ou o que
deu errado.

Classes:

    Professor{
        atributos:[
        +id: int
        +nome: string
        +cpf: string
        +rg: string
        +endereco: string
        +celular: string
        +especializacoes: List<Curso>
        ]
        métodos:[
            findById
            findAll
            save
            deleteById
            putById
            findByEspecializacao
        ]
    }

    Curso{
        atributos:[
            +id: int
            +descricao: string
            +cargaHoraria: int
            +objetivos: string
            +ementa: string
        ]
        métodos:[
            findById
            findAll
            save
            deleteById
            putById
        ]
    }

    Agenda{
        atributos:[
            +id: int
            +curso: Curso
            +dataInicio: date
            +dataFim: date
            +horarioInicio: time
            +horarioFim: time
            +professor: Professor
            +cidade: string
            +estado: string
            +cep: string
            +resumo: string
        ]
        métodos:[
            findByProfessorId
            findProfessorLivre(int id, Date dataInicio, Date dataFim)
            findByCursoId
        ]
    }


Relacionamentos:
Professor 1 - * Agenda. Um professor pode aparecem em muitas agendas.
Curso 1 - * Agenda. Um curso pode aparecer em muitas agendas.
Professor * - * Curso. Muitos professores podem aparecem em muitos cursos.



Dependencias:
H2 Database. JPARepository, SpringBootWeb, Lombok.

Faça as funcionalidades que são pedidas e crie o código como for necessário considerando que irei utilizar o thunder client para testes.